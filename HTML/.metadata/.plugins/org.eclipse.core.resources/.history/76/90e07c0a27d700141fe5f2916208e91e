fino=Enumerator.new do |value|
    n1=1
    n2=1
    loop do
         value.yield n1
         n1,n2=n1+n2,n1
    end
end

class Enumerator
      def infinite_select(&block)
      
      Enumerator.new do |yielder|
        self.each do |value|
        yielder.yield value if block.call(value)
        end
      end
      end
end
  

p fino.infinite_select {|val| val.to_s =~ /1988/ }.infinite_select{|val| val % 10 == 0}.first(15)
  
def Integer.all
    Enumerator.new do |yielder, n:0|  #declare and initialize a local variable n
    loop { yielder.yield(n += 1) }
    end.lazy     #convert the basic generator into a lazy enumerator with the call to lazy after the end of the block
end

def palindrome?(n)
    n=n.to_s
    n==n.reverse
end




p Integer.all.first(10)
p Integer.all.select{|value| (value%3).zero?}.first(10)