class Head_file
    attr_accessor :hash,:node
    
    def initialize(hash,root,total)
        @tree=hash
        @root=root
        @total=total
    end
    
    def generate_head_file(node)    
        if @tree[node+'->left_child']!=nil
               if @tree[node+'->left_child'].length!=1
                      generate_head_file(@tree[node+'->left_child'])                      
               else # left_child.length == 1
                         print '1'+@tree[node+'->left_child']                         
                         @tree[node+'->left_child']=nil
                         generate_head_file(@tree[node+'->current_node'])                         
                         if @tree[node+'->right_child']!=nil
                                  if @tree[node+'->right_node'].length!=1
                                          generate_head_file(@tree[node+'->right_child'])
                                  else                                    
                                          print '1'+@tree[node+'->right_child']
                                          @tree[node+'->right_child']=nil
                                          generate_head_file(@tree[node+'->current_node'])
                                  end
                         end
               end
        elsif @tree[node+'->right_child']!=nil
                if @tree[node+'->right_child'].length!=1

                      generate_head_file(@tree[node+'->right_child'])
                else
                      print '1'+@tree[node+'->right_child']
                      @tree[node+'->right_child']=nil
                      generate_head_file(@tree[node+'->current_node'])
                end               
        else #both child=nil

                       if @tree[node+'->current_node']!=@root
                         print '0'
                         current = @tree[node+'->current_node']
                         next_node=@tree[node+'->next_node']
                         if @tree[next_node+'->left_child']==current
                            @tree[next_node+'->left_child']=nil
                         else
                              @tree[next_node+'->right_child']=nil
                         end
                         generate_head_file(next_node)
                       else
                         print"0#{@total}#"
                         exit
                       end
        end
   end
end

puts"Please enter a sentence here=>\n"
sentence= gets.chomp
#p sentence
character_list=[]

senten=sentence.scan(/./)
final_tree=[]
count = Hash.new(0)
total=0
for character in senten
    count[character]+=1
    total+=1
end
sorted = count.sort_by{|character, count| count} 
  i=0
 # p sorted
#p total
tree=Hash.new
if  total==1
    print"\n1#{sentence}"
else
    loop do
    left=[]
    left<<sorted.shift
    if left[0][0].length<=1
       tree[left[0][0]+'->current_node']=left[0][0]
    end
    right=[]
    right<<sorted.shift
    if  right[0][0].length<=1
        tree[right[0][0]+'->current_node']=right[0][0]
    end
    
    combine_string=left[0][0]
    combine_string+= right[0][0]
    combine_weight=left[0][1]
    combine_weight+=right[0][1]
    
    node_name=combine_string
    tree[combine_string+'->current_node']=combine_string
    tree[combine_string+'->left_child']=left[0][0]
    tree[combine_string+'->right_child']=right[0][0]
    tree[left[0][0]+'->next_node']=combine_string
    tree[right[0][0]+'->next_node']=combine_string

    sorted[0,0]=[[combine_string,combine_weight]]
    sorted=sorted.sort_by{|string,weight| weight} 
    p sorted
    @root=node_name
    break if combine_weight==total
    end
end
p tree
p @root
head=Head_file.new(tree,@root,total)
head.generate_head_file(@root)
