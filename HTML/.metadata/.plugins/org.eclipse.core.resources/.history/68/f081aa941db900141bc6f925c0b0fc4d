class Node
    attr_accessor :current_node, :next_node
    def initialize(val, next_val)
        @current_node = val
        @next_node = next_val
    end
end

class Link_list
  
    def initialize(val)
      @head = Node.new(val, nil)
    end
    
    def add(val)
        current = @head
        while(current.next_node != nil)
            current = current.next_node
        end
        current.next_node = Node.new(val,nil) 
    end 
    
    def delete(val)
        current = @head
        if current.current_node == val
            @head=current.next_node
        else
            current=current.next_node
            current2 = @head
            while (current!=val)
              current=current.next_node
              current2=current2.next_node
            end
            current2.next_node=current.next_node
        end      
    end
    
    def change(old,new)
        current=@head
        if current.current_node == old
           current.current_node == new
        else
           current=current.next_node
           current2=@head
           while(current!=old)
                current=current.next_node
                current2=current2.next
           end
           current2.next_node = Node.new(new,current.next_node)
        end
    end
    
  def display
          # Traverse through the list till you hit the "nil" at the end
          current = @head
          print"#{current.current_node}->"
          while (current.next_node != nil )
            print"#{current.next_node}->"
              current=current.next_node
          end

      end
end

ll = Link_list.new(5)
ll.add(10)
ll.add(15)


# Display the Linked List
puts "Displaying Linked List:"
ll.display


