#regular expressions are just objects

p 'a*b\\'=~/\\/

#The Ruby operator =~ matches a string against a pattern. It returns the character offset into
#the string at which the match occurred

a=/cat/ =~ "dog and cat" # => 8

p a

str = "cat and dog and and #"
if str =~ /cat/
puts "There's a cat here somewhere"
end

File.open("/home/di/Desktop/client.txt") do |f|
  f.each_line.with_index do |line,index|
    if line=~/#/
          line=line.gsub!(/#/,'#comments:')
        end
  end
end

File.read("/home/di/Desktop/client.rb").gsub(/#/,'#comments:')


#The sub method changes only the first match it finds
new_str=str.sub(/and/, 'or')
p new_str

#To replace all matches, use gsub! or sub!
#sub! and gsub! return the string only if the pattern was matched. If no
#match for the pattern is found in the string, they return nil instead.

new_str=str.gsub(/#/,'or')
p new_str

str='sun is rising'

str.gsub!(/in/,'or')
p str
p $& #receives the part of the string that was matched by the pattern
p $` #receives the part of the string that preceded the match
p $' #receives the string after the match

#the match method returns a MatchData object
obj= /a+/.match('ggggaaabbbcccaaddd')
p obj.pre_match   #receives the part of the string that was matched by the pattern
p obj.post_match  #receives the part of the string that preceded the match
p obj[0]          #receives the string after the match






