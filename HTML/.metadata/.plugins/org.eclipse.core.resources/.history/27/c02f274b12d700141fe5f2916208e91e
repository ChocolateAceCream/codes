square=15
sum = 0
[1, 2, 3, 4].each do |value,square|
square = value * value

sum+= square
end
puts square

a=[1,2,3,4]
  p a.collect {|x| x.succ }
 
  
f = File.open("../test.log")
f.each do |line|
puts "The line is: #{line}"
end
f.close

f = File.open("../test.log")
f.each.with_index do |line, index|
puts "Line #{index+1} is: #{line}"
end
f.close

short_enum = [1,2,3,4,5].to_enum
long_enum = ('t'..'z').to_enum
loop do
puts "#{short_enum.next} - #{long_enum.next}"
end


a = [ 1, 3, "cat" ]
h = { dog: "canine", fox: "vulpine" }
# Create Enumerators
enum_a = a.to_enum
enum_h = h.to_enum
p enum_a.next
p enum_h.next
p enum_a.next
p enum_h.next

result = []
[ 'a', 'b', 'c' ].each_with_index {|item, index| result << [item, index] }
p result
# => [["a", 0], ["b", 1], ["c", 2]]

result = []
"cat".each_char.each_with_index {|item, index| result << [item, index]}
p result
# => [["c", 0], ["a", 1], ["t", 2]]



enum_in_threes = (1..10).enum_for(:each_slice, 3)
p enum_in_threes.to_a # => [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10]]

triangular_numbers = Enumerator.new do |yielder|
    number = 0
    count = 1
    loop do
          number += count
          count += 1
          yielder.yield number
          end
end


5.times { print triangular_numbers.next, " " }
p triangular_numbers.last(3)
puts

